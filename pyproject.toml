[project]
name = "Pint"
authors = [
  {name="Hernan E. Grecco", email="hernan.grecco@gmail.com"}
]
license = {text = "BSD"}
description = "Physical quantities module"
readme = "README.rst"
maintainers = [
  {name="Hernan E. Grecco", email="hernan.grecco@gmail.com"},
  {name="Jules ChÃ©ron", email="julescheron@gmail.com"}
]
keywords = ["physical", "quantities", "unit", "conversion", "science"]
classifiers = [
    "Development Status :: 4 - Beta",
    "Intended Audience :: Developers",
    "Intended Audience :: Science/Research",
    "License :: OSI Approved :: BSD License",
    "Operating System :: MacOS :: MacOS X",
    "Operating System :: Microsoft :: Windows",
    "Operating System :: POSIX",
    "Programming Language :: Python",
    "Topic :: Scientific/Engineering",
    "Topic :: Software Development :: Libraries",
    "Programming Language :: Python :: 3.9",
    "Programming Language :: Python :: 3.10",
    "Programming Language :: Python :: 3.11"
]
requires-python = ">=3.9"
dynamic = ["version"] # Version is taken from git tags using setuptools_scm
dependencies = [
  "typing_extensions"
]

[tool.setuptools.package-data]
pint = [
      "default_en.txt",
      "constants_en.txt",
      "py.typed"]


[project.optional-dependencies]
testbase = [
    "pytest",
    "pytest-cov",
    "pytest-subtests",
    "pytest-benchmark"
]
test = [
    "pytest",
    "pytest-mpl",
    "pytest-cov",
    "pytest-subtests",
    "pytest-benchmark"
]
bench = [
    "pytest",
    "pytest-codspeed"
]
numpy = ["numpy >= 1.19.5"]
uncertainties = ["uncertainties >= 3.1.6"]
babel = ["babel <= 2.8"]
pandas = ["pint-pandas >= 0.3"]
xarray = ["xarray"]
dask = ["dask"]
mip = ["mip >= 1.13"]

[project.urls]
Homepage = "https://github.com/hgrecco/pint"
Documentation = "https://pint.readthedocs.io/"

[project.scripts]
pint-convert = "pint.pint_convert:main"

[tool.setuptools]
packages = ["pint"]

[build-system]
requires = ["setuptools>=61", "wheel", "setuptools_scm[toml]>=3.4.3"]
build-backend = "setuptools.build_meta"

[tool.setuptools_scm]

[tool.ruff.isort]
required-imports = ["from __future__ import annotations"]
known-first-party= ["pint"]


[tool.ruff]
extend-select = [
#    "F",           # pyflakes
    "W",           # pycodestyle-warnings
    "E",           # pycodestyle-errors
#    "C90",         # mccabe
#    "I",           # isort
#    "N",           # pep8-naming
#    "D",           # pydocstyle
#    "UP",          # pyupgrade
    "YTT",         # flake8-2020
#    "ANN",         # flake8-annotations
#    "S",           # flake8-bandit
#    "BLE",         # flake8-blind-except
#    "FBT",         # flake8-boolean-trap
#    "B",           # flake8-bugbear
#    "A",           # flake8-builtins
#    "COM",         # flake8-comma
#    "C4",          # flake8-comprehensions
    "T10",         # flake8-debugger
#    "EM",          # flake8-errmsg
    "FA",          # flake8-future-annotations
#    "ISC",         # flake8-implicit-str-concat
    "ICN",         # flake8-import-conventions
#    "G",           # flake8-logging-format
    "PIE",         # flake8-pie
#    "T20",         # flake8-print
#    "PYI",         # flake8-pyi
#    "PT",          # flake8-pytest-style
    "Q",           # flake8-quotes
    "RSE",         # flake8-raise
#    "RET",         # flake8-return
#    "SLF",         # flake8-self
#    "SIM",         # flake8-simplify
#    "TID",         # flake8-tidy-imports
#    "TCH",         # flake8-type-checking
#    "ARG",         # flake8-unused-arguments
#    "PTH",         # flake8-use-pathlib
#    "TD",          # flake8-todos
#    "ERA",         # eradicate
#    "PD",          # pandas-vet
#    "PGH",         # pygrep-hooks
#    "PL",          # pylint
#    "TRY",         # tryceratops
#    "FLY",         # flynt
#    "NPY",         # NumPy
#    "PERF",        # perflint
#    "FURB",        # refurb  # All are in experimental
#    "RUF",         # Ruff-specific
]

ignore = [
  # whitespace before ':' - doesn't work well with black
  # "E203",
  "E402",
  # line too long - let black worry about that
  "E501",
  # do not assign a lambda expression, use a def
  "E731",
  # line break before binary operator
  # "W503"
]
extend-exclude = ["build"]
line-length=88
